<?php
define('SORT_ALPHA', '{node.title}');
define('SORT_CREATED', '{node.created}');
define('SORT_CHANGED', '{node.changed}');
define('SORT_NID', '{node.nid}');

/**
 * Returns the next or previous nid according to the options set.
 *
 * @param int $nid
 *   The Node ID of the current node.
 *
 * @param string $op
 *   Either 'prev' or 'next' depending on whether the next or previous node in
 *   the sequence should be returned.
 *
 * @param constant $sort
 *   One of the following named constants:
 *     - SORT_ALPHA
 *     - SORT_CREATED
 *     - SORT_CHANGED
 *     - SORT_NID
 *
 * @param array $options
 *   An associative array containing the following (all are optional):
 *     - 'types':       Array of content types that the result should be
 *                      restricted to. Default: FALSE. If set to FALSE or
 *                      ommitted, all content types are valid.
 *     - 'terms':       Array of Taxonomy Term IDs that the result should be
 *                      restricted to. Default: FALSE. If set to FALSE or
 *                      ommitted, all Taxonomy Terms are valid (including nodes
 *                      not tagged with any terms).
 *     - 'unpublished': Bool. Whether or not to include unpublished nodes in
 *                      the result. Defaults to FALSE.
 *
 * @return int
 *   The Node ID of the previous or next node in the sequence as defined by the
 *   options param.
 */
function pn_nid($nid, $op = 'next', $sort = SORT_NID, $options = array('types' => FALSE, 'terms' => FALSE, 'unpublished' => FALSE)) {
  // For simplicity, all of the options are contained in one param as an
  // associative array. This allows the user to pick and choose which options
  // they want to specify without worrying about setting defaults. As such, the
  // defaults are erased if the user chooses to define at least one but not all
  // of the options. So we reset any default values that have been lost here.
  $options['types'] = (!isset($options['types'])) ? FALSE : $options['types'];
  $options['terms'] = (!isset($options['terms'])) ? FALSE : $options['terms'];
  $options['unpublished'] = (!isset($options['unpublished'])) ? FALSE : $options['unpublished'];

  // `types` and `terms` are provided as arrays if they are set. We don't want
  // to store, for example, `('page', 'article')` as a different entry from
  // `('article', 'page')`, so we sort them if they are arrays.
  if (is_array($options['types'])) {
    sort($options['types']);
  }
  if (is_array($options['terms'])) {
    sort($options['terms']);
  }

  // Format portions of the options array to be used when generating the hash
  // identifier and inserting values into the db. We also pass these formatted
  // options on to the generate function if necesarry so we don't have to
  // reformat there.
  $unpublished = ($options['unpublished'] == TRUE) ? 1 : 0;
  $imp_types = (is_array($options['types'])) ? implode(', ', $options['types']) : $options['types'];
  $imp_terms = (is_array($options['terms'])) ? implode(', ', $options['terms']) : $options['terms'];

  $hash_id = pn_nid_generate_id($nid, $op, $imp_types, $imp_terms, $unpublished);

  $pn_nid = cache_get($hash_id, 'cache_pn_nid');

  //if (!isset($pn_nid->data)) {
  if (1==1) {
    // If we didn't find a result in the db, we pass the information on to the
    // generate function which will generate, store and return the pn_nid.
    $processed_options = array(
      'options' => $options,
      'imp_types' => $imp_types,
      'imp_terms' => $imp_terms,
      'unpublished' => $unpublished,
      'sort' => $sort,
    );
    $pn_nid = pn_nid_generate($nid, $op, $processed_options);
  }
  else ($pn_nid = $pn_nid->data);
  return $pn_nid;
}

/**
 * Generates and returns the Node ID of the previous or next node as defined
 * in the $options array and stores the result in a DB Table.
 */
function pn_nid_generate($nid, $op, $processed_options) {
  $where_parts = array();

  if ($op == 'next') {
    $where_parts[] = $processed_options['sort'] . ' > :sorter';
    $order = 'ASC';
  }
  else {
    $where_parts[] = $processed_options['sort'] . ' < :sorter';
    $order = 'DESC';
  }

  $where_parts[] = 1;

  if ($processed_options['options']['types']) {
    // Filter the query by node type.
    $node_type_filter = array();
    foreach ($processed_options['options']['types'] as $type) {
      $node_type_filter[] = '{node.type} = \'' . $type . '\'';
    }
    $where_parts[] = '(' . implode(' OR ', $node_type_filter) . ')';
  }

  $join = '';
  if ($processed_options['options']['terms']){
    // Join taxonomy_index table and filter by term
    $term_filter = array();
    foreach ($processed_options['options']['terms'] as $term) {
      $term_filter[] = '{taxonomy_index.tid} = \'' . $term . '\'';
    }
    $where_parts[] = '(' . implode(' OR ', $term_filter) . ')';
    $join = 'LEFT JOIN {taxonomy_index} ON {node.nid}={taxonomy_index.nid} ';
  }

  $where_parts[] = '{node.status} = 1';
  if ($processed_options['unpublished']) {
    // By default, we only return published nodes. But if 'unpublished' is
    // specifically set to true, we don't filter based on published status.
    array_pop($where_parts);
  }

  $where = $join . 'WHERE ' . implode(' AND ', $where_parts);
  $pn_nid = db_query("SELECT {node.nid} FROM {node} " . $where . " ORDER BY " . $processed_options['sort'] . " " . $order, array(':sorter' => pn_nid_sorter($nid, $processed_options['sort']),))->fetchField();
  if (!is_numeric($pn_nid)) {
    if (pn_nid_is_valid_nid($nid)) {
      // If we didn't find the next or previous nid and we're sure it's a
      // valid node id to start with, we must be at the beginning or the end of
      // the sequence. pn_nid_get_first_last() returns the wrapped around node
      // id.
      $pn_nid = pn_nid_get_first_last($nid, $join, $where_parts, $order, $processed_options['sort']);
    }
    else {
      watchdog('pn_nid', 'Invalid Node ID: @nid provided in call to pn_nid()', array('@nid' => $nid), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  $hash_id = pn_nid_generate_id($nid, $op, $processed_options['imp_types'], $processed_options['imp_terms'], $processed_options['unpublished']);
  cache_set($hash_id, $pn_nid, 'cache_pn_nid', CACHE_PERMANENT);

  return $pn_nid;
}

/**
 * Generates and returns the md5 hash identifier for a given node and options.
 */
function pn_nid_generate_id($nid, $op, $imp_types, $imp_terms, $unpublished) {
  $concatanated = $nid . $imp_types . $imp_terms . $op . $unpublished;
  $identifier =  md5($concatanated);
  return $identifier;
}

/**
 * Returns the first or last Node ID fitting the parameters defined in
 * `$where_parts`. We use this if the pn_nid_generate() function doesn't
 * initially find the next or previous node as this can be an indication that
 * the current node is the first or last in the sequence and we need to wrap
 * around.
 */
function pn_nid_get_first_last($nid, $join, $where_parts, $order, $sort) {
  array_shift($where_parts);
  $where = $join . 'WHERE ' . implode(' AND ', $where_parts);
  return db_query("SELECT {node.nid} FROM {node} " . $where . " ORDER BY " . $sort . " " . $order)->fetchField();
}

/**
 * Checks to see if a given integer is a valid Drupal Node ID.
 *
 * @return bool
 */
function pn_nid_is_valid_nid($nid) {
  $valid_node = db_query("SELECT nid FROM {node} WHERE nid = :nid", array(':nid' => $nid,))->fetchField();
  if (is_numeric($valid_node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function used to return the correct piece of information about the
 * node on which the sort will be performed.
 */
function pn_nid_sorter($nid, $sort) {
  switch ($sort) {
    case '{node.title}' :
      $sorter = db_query("SELECT title FROM {node} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
      break;
    case '{node.created}' :
      $sorter = db_query("SELECT created FROM {node} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
      break;
    case '{node.changed}' :
      $sorter = db_query("SELECT changed FROM {node} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
      break;
    case '{node.nid}' :
      $sorter = $nid;
      break;
  }
  return $sorter;
}

/**
 * Implements hook_menu()
 */
function pn_nid_menu() {
  $items = array();

  $items['admin/config/system/pn_nid'] = array(
    'title' => t('Previous/Next Node ID'),
    'description' => t('Configure Previous/Next Node ID settings.'),
    'page callback' => 'pn_nid_admin',
    'access arguments' => array('administer previous next nid'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pn_nid.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function pn_nid_permission() {
  return array(
    'administer previous next nid' => array(
      'title' => 'Administer Previous/Next NID',
      'description' => 'Access the Previous/Next NID administration page.',
    ),
  );
}

/**
 * Implements hook_cron()
 */
function pn_nid_cron() {
  if (variable_get('pn_nid_cache_clear', 2) == 1) {
    pn_nid_clear();
  }
}

/**
 * Clears the pn_nid Cache table
 */
function pn_nid_clear() {
  $result = db_truncate('cache_pn_nid')->execute();
  drupal_set_message('Previous/Next Node ID Cache has been emptied.');
}

/**
 * Implements hook_node_presave().
 *
 * If the user has selected to rebuild the cache on all node updates, we run
 * `pn_nid_clear()` on each node save/update.
 */
function pn_nid_node_presave($node) {
  if (variable_get('pn_nid_cache_clear', 2) == 2) {
    pn_nid_clear();
  }
}
/**
 * Implements hook_node_delete().
 *
 * See hook_node_presave() function above.
 */
function pn_nid_node_delete($node) {
  if (variable_get('pn_nid_cache_clear', 2) == 2) {
    pn_nid_clear();
  }
}
